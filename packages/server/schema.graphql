# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment implements Node {
  id: ID!
  createdDate: DateTime!
  updatedDate: DateTime!
  content: String!
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CommentInput {
  content: String!
  postId: String!
}

type CommentPayload {
  comment: CommentEdge!
}

type CommentsConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addUser(newUserData: UserInput!): User!
  newPost(newPostData: PostInput!): PostPayload!
  login(loginInput: LoginInput!): Session!
  postNewComment(commentInput: CommentInput!): CommentPayload!
}

interface Node {
  id: ID!
}

input PageArgs {
  first: Float
  last: Float
  after: Float
  before: Float
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  createdDate: DateTime!
  updatedDate: DateTime!
  content: String!
  user: User!
  comments: CommentsConnection!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostInput {
  content: String!
}

type PostPayload {
  post: PostEdge!
}

type PostsConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type Query {
  users: [User!]!
  user(id: String!): User!
  posts(userId: Float, before: Float, last: Float, after: Float, first: Float, pagination: PageArgs): PostsConnection!
  post(id: String!): Post!
  validateSession(token: String!): User!
  comments: CommentsConnection!
}

type Session implements Node {
  id: ID!
  createdDate: DateTime!
  updatedDate: DateTime!
  status: String!
  token: String!
  user: User!
}

type User implements Node {
  id: ID!
  createdDate: DateTime!
  updatedDate: DateTime!
  name: String!
  email: String!
}

input UserInput {
  name: String!
  email: String!
  password: String!
}
